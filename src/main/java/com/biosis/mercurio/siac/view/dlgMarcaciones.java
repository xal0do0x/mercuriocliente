/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.biosis.mercurio.siac.view;

import com.biosis.mercurio.siac.controladores.EmpleadoControlador;
import com.biosis.mercurio.siac.controladores.MarcacionControlador;
import com.biosisperu.mercurio.apiclient.MercurioClient;
import com.biosisperu.mercurio.siac.domain.Empleado;
import com.biosisperu.mercurio.siac.domain.Equipo;
import com.biosisperu.mercurio.siac.domain.Marcacion;
import com.futronictech.AnsiSDKLib;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBuffer;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.JOptionPane;

/**
 *
 * @author Aldo
 */
public class dlgMarcaciones extends javax.swing.JDialog {

    private OperationThread mOperationThread = null;
    private float[] mMatchScoreValue = new float[6];
    private String mNewTmplName = null;
    public MyIcon m_FingerPrintImage;
    public BufferedImage m_hImage;
    private EmpleadoControlador empleadoControlador;
    private MercurioClient mercurioClient;
    /**
     * database directory name.
     */
    public static String m_DbDir;
    //Reloj
    private final SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
    private final SimpleDateFormat sdfDate = new SimpleDateFormat("dd/MM/yyyy");
    private int currentSecond;
    private Calendar calendar;

    /**
     * Creates new form dlgMarcaciones
     */
    public dlgMarcaciones(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        empleadoControlador = new EmpleadoControlador();
        mercurioClient = MercurioClient.getInstance();
        mMatchScoreValue[0] = AnsiSDKLib.FTR_ANSISDK_MATCH_SCORE_LOW;
        mMatchScoreValue[1] = AnsiSDKLib.FTR_ANSISDK_MATCH_SCORE_LOW_MEDIUM;
        mMatchScoreValue[2] = AnsiSDKLib.FTR_ANSISDK_MATCH_SCORE_MEDIUM;
        mMatchScoreValue[3] = AnsiSDKLib.FTR_ANSISDK_MATCH_SCORE_HIGH_MEDIUM;
        mMatchScoreValue[4] = AnsiSDKLib.FTR_ANSISDK_MATCH_SCORE_HIGH;
        mMatchScoreValue[5] = AnsiSDKLib.FTR_ANSISDK_MATCH_SCORE_VERY_HIGH;
        // Get database folder
        try {
            m_DbDir = GetDatabaseDir();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "Initialization failed. Application will be close.\nError description: " + e.getMessage(),
                    getTitle(), JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
        m_FingerPrintImage = new MyIcon();

        FingerImage.setIcon(m_FingerPrintImage);
        imagenInicial();
        /**
         * Reloj
         */
        this.start();
        txtFecha.setText(sdfDate.format(calendar.getTime()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();
        lblNombreSis = new javax.swing.JLabel();
        btnMarcaciones = new javax.swing.JButton();
        btnEnrolar = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        pnlHoraFecha = new javax.swing.JPanel();
        lblHora = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        txtHora = new javax.swing.JLabel();
        txtFecha = new javax.swing.JLabel();
        pnlDni = new javax.swing.JPanel();
        lblDni = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        btnMarcar = new javax.swing.JButton();
        LabelMessage = new javax.swing.JLabel();
        FingerImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/nuevo_logo_hermes.jpg"))); // NOI18N

        lblNombreSis.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblNombreSis.setForeground(new java.awt.Color(27, 54, 93));
        lblNombreSis.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblNombreSis.setText("SISTEMA DE ASISTENCIA EN CENTROS");

        btnMarcaciones.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnMarcaciones.setForeground(new java.awt.Color(28, 33, 37));
        btnMarcaciones.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/searcher16x16.png"))); // NOI18N
        btnMarcaciones.setText("Marcaciones");
        btnMarcaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarcacionesActionPerformed(evt);
            }
        });

        btnEnrolar.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnEnrolar.setForeground(new java.awt.Color(28, 33, 37));
        btnEnrolar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/add16x16.png"))); // NOI18N
        btnEnrolar.setText("Enrolar");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        pnlHoraFecha.setBackground(new java.awt.Color(255, 255, 255));
        java.awt.GridBagLayout pnlHoraFechaLayout = new java.awt.GridBagLayout();
        pnlHoraFechaLayout.columnWidths = new int[] {0, 8, 0};
        pnlHoraFechaLayout.rowHeights = new int[] {0, 8, 0};
        pnlHoraFecha.setLayout(pnlHoraFechaLayout);

        lblHora.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        lblHora.setForeground(new java.awt.Color(27, 54, 93));
        lblHora.setText("Hora");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlHoraFecha.add(lblHora, gridBagConstraints);

        lblFecha.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        lblFecha.setForeground(new java.awt.Color(27, 54, 93));
        lblFecha.setText("Fecha");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlHoraFecha.add(lblFecha, gridBagConstraints);

        txtHora.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        txtHora.setForeground(new java.awt.Color(28, 33, 37));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        pnlHoraFecha.add(txtHora, gridBagConstraints);

        txtFecha.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        txtFecha.setForeground(new java.awt.Color(28, 33, 37));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlHoraFecha.add(txtFecha, gridBagConstraints);

        pnlDni.setBackground(new java.awt.Color(255, 255, 255));
        java.awt.GridBagLayout pnlDniLayout1 = new java.awt.GridBagLayout();
        pnlDniLayout1.columnWidths = new int[] {0, 8, 0};
        pnlDniLayout1.rowHeights = new int[] {0};
        pnlDni.setLayout(pnlDniLayout1);

        lblDni.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        lblDni.setForeground(new java.awt.Color(27, 54, 93));
        lblDni.setText("DNI");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlDni.add(lblDni, gridBagConstraints);

        txtDni.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        txtDni.setForeground(new java.awt.Color(28, 33, 37));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        pnlDni.add(txtDni, gridBagConstraints);

        btnMarcar.setBackground(new java.awt.Color(255, 255, 255));
        btnMarcar.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnMarcar.setForeground(new java.awt.Color(0, 0, 102));
        btnMarcar.setText("MARCAR");
        btnMarcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarcarActionPerformed(evt);
            }
        });

        LabelMessage.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(pnlHoraFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 54, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlDni, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnMarcar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(LabelMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlHoraFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDni, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMarcar, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("", jPanel2);

        FingerImage.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLogo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNombreSis, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FingerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnMarcaciones)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEnrolar)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblLogo)
                .addGap(1, 1, 1)
                .addComponent(lblNombreSis)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(FingerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEnrolar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMarcaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMarcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarcarActionPerformed
        // TODO add your handling code here
        if (txtDni.getText().isEmpty()) {
            System.out.println("Entra aca");
            JOptionPane.showMessageDialog(this,
                    "Ingrese dni",
                    getTitle(), JOptionPane.ERROR_MESSAGE);
            return;
        }
        String dniANSI = txtDni.getText() + ".ansi";
        String dniISO = txtDni.getText() + ".iso";

        String tmplName = null;
        byte[] templateContent = null;
        FileInputStream fs = null;
        File f = null;
        if (!(new File(m_DbDir + "//" + dniANSI)).exists() || !(new File(m_DbDir + "//" + dniANSI)).canRead()) {
            if (!(new File(m_DbDir + "//" + dniISO)).exists() || !(new File(m_DbDir + "//" + dniISO)).canRead()) {
                JOptionPane.showMessageDialog(this,
                        "Ingrese dni registrado",
                        getTitle(), JOptionPane.ERROR_MESSAGE);
                return;
            } else {
                tmplName = dniISO;
                System.out.println("Nomber ansi: " + tmplName);

            }
        } else {
            tmplName = dniANSI;
            System.out.println("Nomber ansi: " + tmplName);
        }

        try {
            f = new File(m_DbDir + "//" + tmplName);
            if (!f.exists() || !f.canRead()) {
                throw new FileNotFoundException();
            }

            long nFileSize = f.length();
            fs = new FileInputStream(f);
            byte[] fileContent = new byte[(int) nFileSize];
            fs.read(fileContent);
            fs.close();

            templateContent = fileContent;
        } catch (Exception e) {
            String error = String.format("Failed to load template from file %s. Error: %s.", tmplName, e.toString());
            LabelMessage.setText(error);
        }

        if (templateContent != null) {
            EnableControls(false);
            mOperationThread = new VerifyThread((byte) 0, templateContent, mMatchScoreValue[2]);
            mOperationThread.start();
        }
        EnableControls(false);
    }//GEN-LAST:event_btnMarcarActionPerformed

    private void btnMarcacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarcacionesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnMarcacionesActionPerformed

    private void imagenInicial() {
        try {
            m_FingerPrintImage.setImage(ImageIO.read(getClass().getResource("/image/fingerprint.jpg")));
            FingerImage.repaint();
        } catch (IOException ex) {
            Logger.getLogger(dlgMarcaciones.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equalsIgnoreCase(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dlgMarcaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dlgMarcaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dlgMarcaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dlgMarcaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                dlgMarcaciones dialog = new dlgMarcaciones(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private void EnableControls(boolean valor) {
        txtDni.setEditable(valor);
        txtDni.setEnabled(valor);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FingerImage;
    private javax.swing.JLabel LabelMessage;
    private javax.swing.JButton btnEnrolar;
    private javax.swing.JButton btnMarcaciones;
    private javax.swing.JButton btnMarcar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblDni;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblHora;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblNombreSis;
    private javax.swing.JPanel pnlDni;
    private javax.swing.JPanel pnlHoraFecha;
    private javax.swing.JTextField txtDni;
    private javax.swing.JLabel txtFecha;
    private javax.swing.JLabel txtHora;
    // End of variables declaration//GEN-END:variables
    private class CaptureThread extends OperationThread {

        private AnsiSDKLib ansi_lib = null;

        public CaptureThread() {
            ansi_lib = new AnsiSDKLib();
        }

        @Override
        public void run() {
            boolean dev_open = false;
            try {
                if (!ansi_lib.OpenDevice()) {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                dev_open = true;
                if (!ansi_lib.FillImageSize()) {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                byte[] img_buffer = new byte[ansi_lib.GetImageSize()];
                LabelMessage.setText("Por favor ponga su dedo...");
                for (;;) {
                    if (IsCanceled()) {
                        LabelMessage.setText("Cancelado");
                        break;
                    }
                    if (ansi_lib.CaptureImage(img_buffer)) {
                        //mHandler.obtainMessage(MESSAGE_SHOW_MSG, -1, -1, op_info ).sendToTarget();
                        m_hImage = new BufferedImage(ansi_lib.GetImageWidth(), ansi_lib.GetImageHeight(), BufferedImage.TYPE_BYTE_GRAY);
                        DataBuffer db1 = m_hImage.getRaster().getDataBuffer();
                        for (int i = 0; i < db1.getSize(); i++) {
                            db1.setElem(i, img_buffer[i]);
                        }
                        m_FingerPrintImage.setImage(m_hImage);
                        FingerImage.repaint();
                        LabelMessage.setText("Captura realizada.");
                        break;
                    } else {
                        int lastError = ansi_lib.GetErrorCode();
                        if (lastError == AnsiSDKLib.FTR_ERROR_EMPTY_FRAME
                                || lastError == AnsiSDKLib.FTR_ERROR_NO_FRAME
                                || lastError == AnsiSDKLib.FTR_ERROR_MOVABLE_FINGER) {
                            Thread.sleep(100);
                            continue;
                        } else {
                            String error = String.format("Falla en captura. Error: %s.", ansi_lib.GetErrorMessage());
                            LabelMessage.setText(error);
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                LabelMessage.setText(e.getMessage());
                EnableControls(true);
            }
            if (dev_open) {
                ansi_lib.CloseDevice();
            }
            EnableControls(true);
        }
    }

    private class CreateThread extends OperationThread {

        private AnsiSDKLib ansi_lib = null;
        private byte mFinger = 0;
        private boolean mSaveAnsi = true;
        private boolean mSaveIso = false;
        private String mTmplName = "";

        public CreateThread(byte finger, boolean saveAnsi, boolean saveIso, String tmplName) {
            ansi_lib = new AnsiSDKLib();
            mFinger = finger;
            mSaveAnsi = saveAnsi;
            mSaveIso = saveIso;
            mTmplName = tmplName;
        }

        @Override
        public void run() {
            boolean dev_open = false;
            try {
                if (!ansi_lib.OpenDevice()) {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                dev_open = true;
                if (!ansi_lib.FillImageSize()) {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                LabelMessage.setText("Please put finger...");
                byte[] img_buffer = new byte[ansi_lib.GetImageSize()];
                for (;;) {
                    if (IsCanceled()) {
                        break;
                    }
                    int tmplSize = ansi_lib.GetMaxTemplateSize();
                    byte[] template = new byte[tmplSize];
                    byte[] templateIso = new byte[tmplSize];
                    int[] realSize = new int[1];
                    int[] realIsoSize = new int[1];
                    if (ansi_lib.CreateTemplate(mFinger, img_buffer, template, realSize)) {
                        m_hImage = new BufferedImage(ansi_lib.GetImageWidth(), ansi_lib.GetImageHeight(), BufferedImage.TYPE_BYTE_GRAY);
                        DataBuffer db1 = m_hImage.getRaster().getDataBuffer();
                        for (int i = 0; i < db1.getSize(); i++) {
                            db1.setElem(i, img_buffer[i]);
                        }
                        m_FingerPrintImage.setImage(m_hImage);
                        FingerImage.repaint();
                        LabelMessage.setText("Create template done.");
                        if (mSaveAnsi) {
                            SaveTemplate(mTmplName + ".ansi", template, realSize[0]);
                        }
                        if (mSaveIso) {
                            realIsoSize[0] = tmplSize;
                            if (ansi_lib.ConvertAnsiTemplateToIso(template, templateIso, realIsoSize)) {
                                SaveTemplate(mTmplName + ".iso", templateIso, realIsoSize[0]);
                            } else {
                                String error = String.format("Conver to failed. Error: %s.", ansi_lib.GetErrorMessage());
                                LabelMessage.setText(error);
                            }
                        }
                        break;
                    } else {
                        int lastError = ansi_lib.GetErrorCode();
                        if (lastError == AnsiSDKLib.FTR_ERROR_EMPTY_FRAME
                                || lastError == AnsiSDKLib.FTR_ERROR_NO_FRAME
                                || lastError == AnsiSDKLib.FTR_ERROR_MOVABLE_FINGER) {
                            Thread.sleep(100);
                            continue;
                        } else {
                            String error = String.format("Create failed. Error: %s.", ansi_lib.GetErrorMessage());
                            LabelMessage.setText(error);
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                LabelMessage.setText(e.getMessage());
                EnableControls(true);
            }
            if (dev_open) {
                ansi_lib.CloseDevice();
            }
            EnableControls(true);
        }

        private void SaveTemplate(String name, byte[] template, int size) {
            FileOutputStream fs = null;
            File f = null;
            try {
                f = new File(m_DbDir + "//" + name);
                fs = new FileOutputStream(f);
                byte[] writeTemplate = new byte[size];
                System.arraycopy(template, 0, writeTemplate, 0, size);
                fs.write(writeTemplate);
                fs.close();
            } catch (Exception e) {
                String error = String.format("Failed to save template to file %s. Error: %s.", name, e.toString());
                LabelMessage.setText(error);
            }
        }
    }

    private class VerifyThread extends OperationThread {

        private AnsiSDKLib ansi_lib = null;
        private byte mFinger = 0;
        private byte[] mTmpl = null;
        private float mMatchScore = 0;

        public VerifyThread(byte finger, byte[] template, float matchScore) {
            ansi_lib = new AnsiSDKLib();
            mFinger = finger;
            mTmpl = template;
            mMatchScore = matchScore;
        }

        @Override
        public void run() {
            boolean dev_open = false;
            try {
                if (!ansi_lib.OpenDevice()) {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                dev_open = true;
                if (!ansi_lib.FillImageSize()) {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                LabelMessage.setText("Por favor ponga su dedo...");
                byte[] img_buffer = new byte[ansi_lib.GetImageSize()];
                for (;;) {
                    if (IsCanceled()) {
                        LabelMessage.setText("Cancelado");
                        break;
                    }
                    float[] matchResult = new float[1];
                    if (ansi_lib.VerifyTemplate(mFinger, mTmpl, img_buffer, matchResult)) {
                        String op_info = String.format("Resultado : %s - %s.", txtDni.getText(), matchResult[0] > mMatchScore ? "OK" : "FALLO");
                        if (matchResult[0] > mMatchScore) {
                            Empleado empleado = empleadoControlador.buscarPorDNI(txtDni.getText());
                            Marcacion marcacion = new Marcacion();
                            Equipo equipo = new Equipo();
                            equipo.setId(1101L);
                            empleado.setId(1051L);
                            marcacion.setEmpleado(empleado);
                            marcacion.setEquipo(equipo);
                            marcacion.setEnviado(false);
                            marcacion.setFechaHora(new Date());
                            MarcacionControlador.getInstance().guardar(marcacion);
                            mercurioClient.enviarMarcacion(marcacion);
                            JOptionPane.showMessageDialog(null, "Empleado: " + empleado.getApellidos() + " " + empleado.getNombres(), "Marcación registrada", JOptionPane.CLOSED_OPTION);

                        }
                        LabelMessage.setText(op_info);
                        m_hImage = new BufferedImage(ansi_lib.GetImageWidth(), ansi_lib.GetImageHeight(), BufferedImage.TYPE_BYTE_GRAY);
                        DataBuffer db1 = m_hImage.getRaster().getDataBuffer();
                        for (int i = 0; i < db1.getSize(); i++) {
                            db1.setElem(i, img_buffer[i]);
                        }
                        m_FingerPrintImage.setImage(m_hImage);
                        FingerImage.repaint();
                        break;
                    } else {
                        int lastError = ansi_lib.GetErrorCode();
                        if (lastError == AnsiSDKLib.FTR_ERROR_EMPTY_FRAME
                                || lastError == AnsiSDKLib.FTR_ERROR_NO_FRAME
                                || lastError == AnsiSDKLib.FTR_ERROR_MOVABLE_FINGER) {
                            Thread.sleep(100);
                            continue;
                        } else {
                            String error = String.format("Verify failed. Error: %s.", ansi_lib.GetErrorMessage());
                            LabelMessage.setText(error);
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                LabelMessage.setText(e.getMessage());
                EnableControls(true);
            }
            if (dev_open) {
                ansi_lib.CloseDevice();
            }
            EnableControls(true);
            cleanItems();
        }
    }

    private class IdentifyThread extends OperationThread {

        private AnsiSDKLib ansi_lib = null;
        private byte mFinger = 0;
        private float mMatchScore = 0;

        public IdentifyThread(byte finger, float matchScore) {
            ansi_lib = new AnsiSDKLib();
            mFinger = finger;
            mMatchScore = matchScore;
        }

        @Override
        public void run() {
            boolean dev_open = false;
            try {
                if (!ansi_lib.OpenDevice()) {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                dev_open = true;
                if (!ansi_lib.FillImageSize()) {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                LabelMessage.setText("Coloque su dedo por favor...");
                byte[] img_buffer = new byte[ansi_lib.GetImageSize()];
                for (;;) {
                    if (IsCanceled()) {
                        LabelMessage.setText("Cancelado.");
                        break;
                    }
                    int tmplSize = ansi_lib.GetMaxTemplateSize();
                    byte[] templateBase = new byte[tmplSize];
                    int[] realSize = new int[1];
                    if (ansi_lib.CreateTemplate(mFinger, img_buffer, templateBase, realSize)) {
                        m_hImage = new BufferedImage(ansi_lib.GetImageWidth(), ansi_lib.GetImageHeight(), BufferedImage.TYPE_BYTE_GRAY);
                        DataBuffer db1 = m_hImage.getRaster().getDataBuffer();
                        for (int i = 0; i < db1.getSize(); i++) {
                            db1.setElem(i, img_buffer[i]);
                        }
                        m_FingerPrintImage.setImage(m_hImage);
                        FingerImage.repaint();
                        // start matching templates
                        FindTemplate(templateBase);
                        //
                        break;
                    } else {
                        int lastError = ansi_lib.GetErrorCode();
                        if (lastError == AnsiSDKLib.FTR_ERROR_EMPTY_FRAME
                                || lastError == AnsiSDKLib.FTR_ERROR_NO_FRAME
                                || lastError == AnsiSDKLib.FTR_ERROR_MOVABLE_FINGER) {
                            Thread.sleep(100);
                            continue;
                        } else {
                            String error = String.format("Error al crear: %s.", ansi_lib.GetErrorMessage());
                            LabelMessage.setText(error);
                            break;
                        }
                    }
                }
            } catch (Exception e) {
                LabelMessage.setText(e.getMessage());
                EnableControls(true);
            }
            if (dev_open) {
                ansi_lib.CloseDevice();
            }
            EnableControls(true);
        }

        private void FindTemplate(byte[] baseTemplate) {
            File DbDir;
            File[] files;
            // Read all records to identify
            DbDir = new File(m_DbDir);
            files = DbDir.listFiles();
            float[] matchResult = new float[1];
            boolean found = false;
            for (int iFiles = 0; iFiles < files.length; iFiles++) {
                File curFile = files[iFiles];
                if (curFile.isFile()) {
                    byte[] template = ReadTemplate(curFile);
                    if (template != null) {
                        if (ansi_lib.MatchTemplates(baseTemplate, template, matchResult) && matchResult[0] > mMatchScore) {
                            String message = String.format("Huella encontrada. Nombre: %s(%d:%d). Score:%f", curFile.getName(), iFiles + 1, files.length, matchResult[0]);
                            LabelMessage.setText(message);
                            found = true;
                            break;
                        }
                    }
                }
            }
            if (!found) {
                LabelMessage.setText("Template not found");
            }
        }

        private byte[] ReadTemplate(File templateFile) {
            byte[] templateContent = null;
            FileInputStream fs = null;
            try {
                long nFileSize = templateFile.length();
                fs = new FileInputStream(templateFile);
                byte[] fileContent = new byte[(int) nFileSize];
                fs.read(fileContent);
                fs.close();
                templateContent = fileContent;
            } catch (Exception e) {
            }
            return templateContent;
        }
    }

    private boolean isUserExists(String szUserName) {
        File f = new File(m_DbDir, szUserName);
        return f.exists();
    }

    private void CreateFile(String szFileName)
            throws Exception {
        File f = new File(m_DbDir, szFileName);
        try {
            f.createNewFile();
            f.delete();
        } catch (IOException e) {
            throw new Exception("Can not create file " + szFileName + " in database.");
        } catch (SecurityException e) {
            throw new Exception("Can not create file " + szFileName + " in database. Access denied");
        }
    }

    private class MyIcon implements Icon {

        public MyIcon() {
            m_Image = null;
        }

        @Override
        public void paintIcon(Component c, Graphics g, int x, int y) {
            if (m_Image != null) {
                g.drawImage(m_Image, x, y, getIconWidth(), getIconHeight(), null);
            } else {
                g.fillRect(x, y, getIconWidth(), getIconHeight());
            }
        }

        @Override
        public int getIconWidth() {
            return 148;
        }

        @Override
        public int getIconHeight() {
            return 198;
        }

        public boolean LoadImage(String path) {
            boolean bRetCode = false;
            Image newImg;
            try {
                File f = new File(path);
                newImg = ImageIO.read(f);
                bRetCode = true;
                setImage(newImg);
            } catch (IOException e) {
            }

            return bRetCode;
        }

        public void setImage(Image Img) {
            if (Img != null) {
                m_Image = Img.getScaledInstance(getIconWidth(), getIconHeight(), Image.SCALE_FAST);
            } else {
                m_Image = null;
            }
        }

        private Image m_Image;
    }

    /**
     * Get the database directory.
     *
     * @return the database directory.
     */
    static private String GetDatabaseDir() throws Exception {
        String szDbDir;
        File f = new File("Database");
        if (f.exists()) {
            if (!f.isDirectory()) {
                throw new Exception("Can not create database directory " + f.getAbsolutePath()
                        + ". File with the same name already exist.");
            }
        } else {
            try {
                f.mkdir();
            } catch (SecurityException e) {
                throw new Exception("Can not create database directory " + f.getAbsolutePath()
                        + ". Access denied.");
            }
        }
        szDbDir = f.getAbsolutePath();

        return szDbDir;
    }

    /**
     * Reloj functions
     */
    private void reset() {
        calendar = Calendar.getInstance();
        currentSecond = calendar.get(Calendar.SECOND);
    }

    public void start() {
        reset();
        ScheduledExecutorService worker = Executors.newScheduledThreadPool(3);
        worker.scheduleAtFixedRate(new Runnable() {
            public void run() {
                if (currentSecond == 60) {
                    reset();
                }
                txtHora.setText(String.format("%s:%02d", sdf.format(calendar.getTime()), currentSecond));
                currentSecond++;
            }
        }, 0, 1000, TimeUnit.MILLISECONDS);
    }

    private void cleanItems() {
        txtDni.setText("");
    }
}
