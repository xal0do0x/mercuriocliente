/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.biosis.mercurio.siac.view;

import com.futronictech.AnsiSDKLib;
import com.sun.glass.ui.View;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBuffer;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.Icon;

/**
 *
 * @author Aldo
 */
public class dlgMarcaciones extends javax.swing.JDialog {
    
    private OperationThread mOperationThread = null;
    private float[] mMatchScoreValue = new float[6]; 
    private String mNewTmplName = null;
    public MyIcon  m_FingerPrintImage;
    public BufferedImage m_hImage;
    

    /**
     * Creates new form dlgMarcaciones
     */
    public dlgMarcaciones(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblLogo = new javax.swing.JLabel();
        lblNombreSis = new javax.swing.JLabel();
        pnlBoton = new javax.swing.JPanel();
        pnlDatos = new javax.swing.JPanel();
        pnlDni = new javax.swing.JPanel();
        lblDni = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        pnlHoraFecha = new javax.swing.JPanel();
        lblHora = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        txtHora = new javax.swing.JTextField();
        txtFecha = new javax.swing.JTextField();
        FingerImage = new javax.swing.JLabel();
        btnMarcar = new javax.swing.JButton();
        LabelMessage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        lblLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/nuevo_logo_hermes.jpg"))); // NOI18N

        lblNombreSis.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        lblNombreSis.setForeground(new java.awt.Color(27, 54, 93));
        lblNombreSis.setText("SISTEMA DE ASISTENCIA EN CENTROS");

        java.awt.GridBagLayout pnlDatosLayout = new java.awt.GridBagLayout();
        pnlDatosLayout.columnWidths = new int[] {0, 8, 0};
        pnlDatosLayout.rowHeights = new int[] {0};
        pnlDatos.setLayout(pnlDatosLayout);

        java.awt.GridBagLayout pnlDniLayout1 = new java.awt.GridBagLayout();
        pnlDniLayout1.columnWidths = new int[] {0, 8, 0};
        pnlDniLayout1.rowHeights = new int[] {0};
        pnlDni.setLayout(pnlDniLayout1);

        lblDni.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        lblDni.setForeground(new java.awt.Color(27, 54, 93));
        lblDni.setText("Dni");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlDni.add(lblDni, gridBagConstraints);

        txtDni.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        txtDni.setForeground(new java.awt.Color(28, 33, 37));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        pnlDni.add(txtDni, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        pnlDatos.add(pnlDni, gridBagConstraints);

        java.awt.GridBagLayout pnlHoraFechaLayout = new java.awt.GridBagLayout();
        pnlHoraFechaLayout.columnWidths = new int[] {0, 8, 0};
        pnlHoraFechaLayout.rowHeights = new int[] {0, 8, 0};
        pnlHoraFecha.setLayout(pnlHoraFechaLayout);

        lblHora.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        lblHora.setForeground(new java.awt.Color(27, 54, 93));
        lblHora.setText("Hora");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlHoraFecha.add(lblHora, gridBagConstraints);

        lblFecha.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        lblFecha.setForeground(new java.awt.Color(27, 54, 93));
        lblFecha.setText("Fecha");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        pnlHoraFecha.add(lblFecha, gridBagConstraints);

        txtHora.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        txtHora.setForeground(new java.awt.Color(28, 33, 37));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        pnlHoraFecha.add(txtHora, gridBagConstraints);

        txtFecha.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        txtFecha.setForeground(new java.awt.Color(28, 33, 37));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        pnlHoraFecha.add(txtFecha, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.05;
        pnlDatos.add(pnlHoraFecha, gridBagConstraints);

        FingerImage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnMarcar.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        btnMarcar.setForeground(new java.awt.Color(27, 54, 93));
        btnMarcar.setText("MARCAR");
        btnMarcar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarcarActionPerformed(evt);
            }
        });

        LabelMessage.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        LabelMessage.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(lblNombreSis)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lblLogo))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(pnlDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 458, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(btnMarcar, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53)
                        .addComponent(FingerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(LabelMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(pnlBoton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLogo)
                .addGap(20, 20, 20)
                .addComponent(lblNombreSis)
                .addGap(18, 18, 18)
                .addComponent(pnlDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(pnlBoton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(LabelMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(FingerImage, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnMarcar, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMarcarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarcarActionPerformed
        // TODO add your handling code here
        EnableControls(false);
        mOperationThread = new CaptureThread();
        mOperationThread.start();
    }//GEN-LAST:event_btnMarcarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dlgMarcaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dlgMarcaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dlgMarcaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dlgMarcaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                dlgMarcaciones dialog = new dlgMarcaciones(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private void EnableControls(boolean valor){
        txtDni.setEditable(valor);
        txtDni.setEnabled(valor);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FingerImage;
    private javax.swing.JLabel LabelMessage;
    private javax.swing.JButton btnMarcar;
    private javax.swing.JLabel lblDni;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblHora;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblNombreSis;
    private javax.swing.JPanel pnlBoton;
    private javax.swing.JPanel pnlDatos;
    private javax.swing.JPanel pnlDni;
    private javax.swing.JPanel pnlHoraFecha;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtHora;
    // End of variables declaration//GEN-END:variables
    private class CaptureThread extends OperationThread 
    {
        private AnsiSDKLib ansi_lib = null;
  
        public CaptureThread()
        {
            ansi_lib = new AnsiSDKLib();
        }

        @Override
        public void run()
        {
            boolean dev_open = false;
            try
            {
                if(!ansi_lib.OpenDevice())
                {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                dev_open = true;
                if(!ansi_lib.FillImageSize())
                {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                byte[] img_buffer = new byte[ansi_lib.GetImageSize()];
                LabelMessage.setText("Please put finger...");
                for(;;)
                {
                    if( IsCanceled() )
                    {
                        LabelMessage.setText("Cancelled");
                        break;
                    }
                    if(ansi_lib.CaptureImage(img_buffer))
                    {
                        //mHandler.obtainMessage(MESSAGE_SHOW_MSG, -1, -1, op_info ).sendToTarget();
                        m_hImage = new BufferedImage(ansi_lib.GetImageWidth(), ansi_lib.GetImageHeight(), BufferedImage.TYPE_BYTE_GRAY );
                        DataBuffer db1 = m_hImage.getRaster().getDataBuffer();
                        for( int i = 0; i < db1.getSize(); i++ )
                        {
                            db1.setElem( i, img_buffer[i] );
                        }
                        m_FingerPrintImage.setImage( m_hImage );
                        FingerImage.repaint();
                        LabelMessage.setText("Capture done.");
                        break;
                    }
                    else
                    {
                        int lastError = ansi_lib.GetErrorCode();
                        if(lastError == AnsiSDKLib.FTR_ERROR_EMPTY_FRAME || 
                            lastError == AnsiSDKLib.FTR_ERROR_NO_FRAME ||
                            lastError == AnsiSDKLib.FTR_ERROR_MOVABLE_FINGER )
                        {
                            Thread.sleep(100);
                            continue;
                        }
                        else
                        {
                            String error = String.format("Capture failed. Error: %s.",  ansi_lib.GetErrorMessage());   
                            LabelMessage.setText(error);
                            break;
                        }
                    }
                }
            }
            catch(Exception e)
            {
                LabelMessage.setText(e.getMessage());
                EnableControls(true);
            }
            if(dev_open)
            {
                ansi_lib.CloseDevice();
            }
            EnableControls(true);
        }
    }

    private class CreateThread extends OperationThread 
    {
        private AnsiSDKLib ansi_lib = null;
        private byte mFinger = 0;
        private boolean mSaveAnsi = true;
        private boolean mSaveIso = false;
        private String mTmplName = "";

        public CreateThread(byte finger,boolean saveAnsi,boolean saveIso,String tmplName)
        {
            ansi_lib = new AnsiSDKLib();
            mFinger = finger;
            mSaveAnsi = saveAnsi;
            mSaveIso = saveIso;
            mTmplName = tmplName;
        }

        @Override
        public void run()
        {
            boolean dev_open = false;
            try
            {
                if(!ansi_lib.OpenDevice())
                {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                dev_open = true;
                if(!ansi_lib.FillImageSize())
                {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                LabelMessage.setText("Please put finger...");
                byte[] img_buffer = new byte[ansi_lib.GetImageSize()];
                for(;;)
                {
                    if( IsCanceled() )
                    {
                        break;
                    }
                    int tmplSize = ansi_lib.GetMaxTemplateSize();
                    byte[] template = new byte[tmplSize];
                    byte[] templateIso = new byte[tmplSize];
                    int[] realSize = new int[1];
                    int[] realIsoSize = new int[1];
                    if(ansi_lib.CreateTemplate(mFinger,img_buffer,template,realSize))
                    {
                        m_hImage = new BufferedImage(ansi_lib.GetImageWidth(), ansi_lib.GetImageHeight(), BufferedImage.TYPE_BYTE_GRAY );
                        DataBuffer db1 = m_hImage.getRaster().getDataBuffer();
                        for( int i = 0; i < db1.getSize(); i++ )
                        {
                            db1.setElem( i, img_buffer[i] );
                        }
                        m_FingerPrintImage.setImage( m_hImage );
                        FingerImage.repaint();
                        LabelMessage.setText("Create template done.");
                        if(mSaveAnsi)
                        {
                            SaveTemplate(mTmplName + ".ansi", template, realSize[0]);
                        }
                        if(mSaveIso)
                        {
                            realIsoSize[0] = tmplSize;
                            if(ansi_lib.ConvertAnsiTemplateToIso(template, templateIso, realIsoSize))
                            {
                                SaveTemplate(mTmplName + ".iso", templateIso, realIsoSize[0]);
                            }
                            else
                            {
                                String error = String.format("Conver to failed. Error: %s.",  ansi_lib.GetErrorMessage());   
                                LabelMessage.setText(error);
                            }
                        }
                        break;
                    }
                    else
                    {
                        int lastError = ansi_lib.GetErrorCode();
                        if(lastError == AnsiSDKLib.FTR_ERROR_EMPTY_FRAME || 
                            lastError == AnsiSDKLib.FTR_ERROR_NO_FRAME ||
                            lastError == AnsiSDKLib.FTR_ERROR_MOVABLE_FINGER )
                        {
                            Thread.sleep(100);
                            continue;
                        }
                        else
                        {
                            String error = String.format("Create failed. Error: %s.",  ansi_lib.GetErrorMessage());   
                            LabelMessage.setText(error);
                            break;
                        }
                    }
                }
            }
            catch(Exception e)
            {
                LabelMessage.setText(e.getMessage());
                EnableControls(true);
            }
            if(dev_open)
            {
                ansi_lib.CloseDevice();
            }
            EnableControls(true);
        }

        private void SaveTemplate(String name, byte[] template, int size)
        {
            FileOutputStream fs = null;
            File f = null;
            try
            {
                f = new File("//" + name );
                fs = new FileOutputStream( f ); 
                byte[] writeTemplate = new byte[size];
                System.arraycopy(template, 0, writeTemplate, 0, size);
                fs.write(writeTemplate);
                fs.close();
            }
            catch(Exception e)
            {
                String error = String.format("Failed to save template to file %s. Error: %s.", name, e.toString());   
                LabelMessage.setText(error);
            }
        }
    }
    
    private class VerifyThread extends OperationThread 
    {
        private AnsiSDKLib ansi_lib = null;
        private byte mFinger = 0;
        private byte[] mTmpl = null;
        private float mMatchScore = 0;

        public VerifyThread(byte finger, byte[] template, float matchScore)
        {
            ansi_lib = new AnsiSDKLib();
            mFinger = finger;
            mTmpl = template;
            mMatchScore = matchScore;
        }

        @Override
        public void run()
        {
            boolean dev_open = false;
            try
            {
                if(!ansi_lib.OpenDevice())
                {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                dev_open = true;
                if(!ansi_lib.FillImageSize())
                {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                LabelMessage.setText("Please put finger...");
                byte[] img_buffer = new byte[ansi_lib.GetImageSize()];
                for(;;)
                {
                    if( IsCanceled() )
                    {
                        LabelMessage.setText("Cancelled.");
                        break;
                    }
                    float[] matchResult = new float[1];
                    if(ansi_lib.VerifyTemplate(mFinger,mTmpl,img_buffer,matchResult))
                    {
                        String op_info = String.format("Verify done. Result: %s(%f).", matchResult[0]>mMatchScore ? "OK" : "FAILED", matchResult[0]);                		
                        LabelMessage.setText(op_info);
                        m_hImage = new BufferedImage(ansi_lib.GetImageWidth(), ansi_lib.GetImageHeight(), BufferedImage.TYPE_BYTE_GRAY );
                        DataBuffer db1 = m_hImage.getRaster().getDataBuffer();
                        for( int i = 0; i < db1.getSize(); i++ )
                        {
                            db1.setElem( i, img_buffer[i] );
                        }
                        m_FingerPrintImage.setImage( m_hImage );
                        FingerImage.repaint();
                        break;
                    }
                    else
                    {
                        int lastError = ansi_lib.GetErrorCode();
                        if(lastError == AnsiSDKLib.FTR_ERROR_EMPTY_FRAME || 
                            lastError == AnsiSDKLib.FTR_ERROR_NO_FRAME ||
                            lastError == AnsiSDKLib.FTR_ERROR_MOVABLE_FINGER )
                        {
                            Thread.sleep(100);
                            continue;
                        }
                        else
                        {
                            String error = String.format("Verify failed. Error: %s.",  ansi_lib.GetErrorMessage());   
                            LabelMessage.setText(error);
                            break;
                        }
                    }
                }
            }
            catch(Exception e)
            {
                LabelMessage.setText(e.getMessage());
                EnableControls(true);
            }
            if(dev_open)
            {
                ansi_lib.CloseDevice();
            }
            EnableControls(true);
        }
    }
    
    private class IdentifyThread extends OperationThread 
    {
        private AnsiSDKLib ansi_lib = null;
        private byte mFinger = 0;
        private float mMatchScore = 0;
 
        public IdentifyThread(byte finger,float matchScore)
        {
            ansi_lib = new AnsiSDKLib();
            mFinger = finger;
            mMatchScore = matchScore;
        }

        @Override
        public void run()
        {
            boolean dev_open = false;
            try
            {
                if(!ansi_lib.OpenDevice())
                {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                dev_open = true;
                if(!ansi_lib.FillImageSize())
                {
                    LabelMessage.setText(ansi_lib.GetErrorMessage());
                    EnableControls(true);
                    return;
                }
                LabelMessage.setText("Please put finger...");
                byte[] img_buffer = new byte[ansi_lib.GetImageSize()];
                for(;;)
                {
                    if( IsCanceled() )
                    {
                        LabelMessage.setText("Cancelled.");
                        break;
                    }
                    int tmplSize = ansi_lib.GetMaxTemplateSize();
                    byte[] templateBase = new byte[tmplSize];
                    int[] realSize = new int[1];
                    if(ansi_lib.CreateTemplate(mFinger,img_buffer,templateBase,realSize))
                    {
                        m_hImage = new BufferedImage(ansi_lib.GetImageWidth(), ansi_lib.GetImageHeight(), BufferedImage.TYPE_BYTE_GRAY );
                        DataBuffer db1 = m_hImage.getRaster().getDataBuffer();
                        for( int i = 0; i < db1.getSize(); i++ )
                        {
                            db1.setElem( i, img_buffer[i] );
                        }
                        m_FingerPrintImage.setImage( m_hImage );
                        FingerImage.repaint();
                        // start matching templates
                        FindTemplate(templateBase);
                        //
                        break;
                    }
                    else
                    {
                        int lastError = ansi_lib.GetErrorCode();
                        if(lastError == AnsiSDKLib.FTR_ERROR_EMPTY_FRAME || 
                            lastError == AnsiSDKLib.FTR_ERROR_NO_FRAME ||
                            lastError == AnsiSDKLib.FTR_ERROR_MOVABLE_FINGER )
                        {
                            Thread.sleep(100);
                            continue;
                        }
                        else
                        {
                            String error = String.format("Create failed. Error: %s.",  ansi_lib.GetErrorMessage());   
                            LabelMessage.setText(error);
                            break;
                        }
                    }
                }
            }
            catch(Exception e)
            {
                LabelMessage.setText(e.getMessage());
                EnableControls(true);
            }
            if(dev_open)
            {
                ansi_lib.CloseDevice();
            }
            EnableControls(true);
        }

        private void FindTemplate(byte[] baseTemplate)
        {
            File DbDir;
            File[] files;
            // Read all records to identify
            DbDir = new File("");
            files = DbDir.listFiles();
            float[] matchResult = new float[1];
            boolean found = false; 
            for( int iFiles = 0; iFiles < files.length; iFiles++)
            {
                File curFile = files[iFiles];
                if( curFile.isFile() )
                {
                    byte[] template = ReadTemplate(curFile);
                    if( template != null )
                    {
                        if(ansi_lib.MatchTemplates(baseTemplate, template, matchResult ) && matchResult[0] > mMatchScore)
                        {
                            String message = String.format("Template found. Name: %s(%d:%d). Score:%f", curFile.getName(),iFiles + 1,files.length, matchResult[0]);
                            LabelMessage.setText(message);
                            found = true;
                            break;
                        }
                    }
                }
            }
            if(!found)
            {
                LabelMessage.setText("Template not found");
            }
        }

        private byte[] ReadTemplate(File templateFile)
        {
            byte[] templateContent = null;
            FileInputStream fs = null;
            try
            {
                long nFileSize = templateFile.length();
                fs = new FileInputStream( templateFile );
                byte[] fileContent = new byte[(int)nFileSize];
                fs.read( fileContent );
                fs.close();
                templateContent = fileContent;
            }
            catch( Exception e )
            {
            }
            return templateContent;
        }
    }
    
    private  class MyIcon implements  Icon
    {
        public MyIcon()
        {
            m_Image = null;
        }

        @Override
        public void paintIcon(Component c, Graphics g, int x, int y)
        {
            if( m_Image != null )
                g.drawImage( m_Image, x, y, getIconWidth(), getIconHeight(), null );
            else
                g.fillRect( x, y, getIconWidth(), getIconHeight() );
        }

        @Override
        public int getIconWidth()
        {
            return 130;
        }

        @Override
        public int getIconHeight()
        {
            return 230;
        }

        public boolean LoadImage( String path )
        {
            boolean bRetCode = false;
            Image newImg;
            try
            {
                File f = new File( path );
                newImg = ImageIO.read( f );
                bRetCode = true;
                setImage( newImg );
            }
            catch( IOException e )
            {
            }

            return bRetCode;
        }

        public void setImage( Image Img )
        {
            if( Img != null )
                m_Image = Img.getScaledInstance( getIconWidth(), getIconHeight(), Image.SCALE_FAST);
            else
                m_Image = null;
        }

        private Image m_Image;
    }
}
